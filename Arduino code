#include <WiFiS3.h>
#include <PubSubClient.h>
#include <DHT.h>

// 핀 설정
#define RELAY_PIN 2
#define PAN_PIN 4
#define DOOR_PIN 9
#define DHTPIN 10
#define DHTTYPE DHT11

#include <Servo.h>
Servo myservo;

DHT dht(DHTPIN, DHTTYPE);

// Wi-Fi 정보
const char* ssid = "SmartCenter 2.4G";
const char* password = "12345678";

// MQTT 브로커 정보
const char* mqtt_server = "pubcode2.iptime.org";
const int mqtt_port = 31883;
const char* mqtt_topic_sub = "b03_test";
const char* mqtt_topic_pub = "b03_sensor"; // 센서 데이터 전송용 토픽

WiFiClient wifiClient;
PubSubClient client(wifiClient);

// 와이파이 연결
void setup_wifi() {
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nWiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

// MQTT 메시지 수신 콜백
void callback(char* topic, byte* payload, unsigned int length) {
  String message;
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }

  Serial.print("Message received: ");
  Serial.println(message);

  if (message == "OFF") {
    digitalWrite(RELAY_PIN, HIGH);
    Serial.println("Relay ON");
  } else if (message == "ON") {
    digitalWrite(RELAY_PIN, LOW);
    Serial.println("Relay OFF");
  }
  if (message == "PAN_OFF") {
    digitalWrite(PAN_PIN, HIGH);
    Serial.println("Relay Pan ON");
  } else if (message == "PAN_ON") {
    digitalWrite(PAN_PIN, LOW);
    Serial.println("Relay Pan OFF");
  }  
  if (message == "DOOR_OFF") {
    myservo.write(120);
    Serial.println("DOOR CLOSE");
  } else if (message == "DOOR_ON") {
    myservo.write(0);
    Serial.println("DOOR OPEN");
  }
}

// MQTT 재연결
void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("arduinoClient")) {
      Serial.println("connected");
      client.subscribe(mqtt_topic_sub);
      Serial.println("Subscribed to topic: b03_test");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" retrying in 5 seconds...");
      delay(5000);
    }
  }
}

unsigned long lastPublish = 0;
const unsigned long publishInterval = 5000; // 5초마다 전송

void setup() {
  Serial.begin(9600);
  myservo.attach(DOOR_PIN);
  myservo.write(0);  // 초기 위치

  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, HIGH);  // 초기 릴레이 OFF
  pinMode(PAN_PIN, OUTPUT);
  digitalWrite(PAN_PIN, HIGH);    // 초기 릴레이 OFF

  dht.begin();
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // 주기적 온습도 측정 및 MQTT 전송
  unsigned long now = millis();
  if (now - lastPublish > publishInterval) {
    lastPublish = now;

    float h = dht.readHumidity();
    float t = dht.readTemperature();

    if (isnan(h) || isnan(t)) {
      Serial.println("Failed to read from DHT sensor!");
      return;
    }

    // JSON 형식 메시지 전송
    String payload = "{";
    payload += "\"temperature\":" + String(t, 1) + ",";
    payload += "\"humidity\":" + String(h, 1);
    payload += "}";

    Serial.print("Publishing: ");
    Serial.println(payload);
    client.publish(mqtt_topic_pub, payload.c_str());
  }
}
